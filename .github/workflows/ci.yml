name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Prepare NYC data
      run: |
        python src/prepare_nyc_data.py

    - name: Run benchmarks
      run: |
        python benchmarks/benchmark_runner.py --n-scenarios 10 --algorithms greedy,hybrid

    - name: Generate thesis results
      run: |
        python benchmarks/generate_thesis_results.py

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmarks/results/
          benchmarks/thesis_results/

  build-docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-full

    - name: Build thesis PDF
      run: |
        cd thesis
        pdflatex -interaction=nonstopmode thesis_final.tex
        biber thesis_final
        pdflatex -interaction=nonstopmode thesis_final.tex
        pdflatex -interaction=nonstopmode thesis_final.tex

    - name: Upload thesis PDF
      uses: actions/upload-artifact@v3
      with:
        name: thesis-pdf
        path: thesis/thesis_final.pdf

  deploy-demo:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test demo application
      run: |
        cd demo
        python -m pytest test_demo.py -v

    - name: Build Docker image
      run: |
        docker build -t nyc-itinerary-demo .

    - name: Push to registry
      env:
        DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME --password-stdin
        docker tag nyc-itinerary-demo $DOCKER_REGISTRY/nyc-itinerary-demo:latest
        docker push $DOCKER_REGISTRY/nyc-itinerary-demo:latest